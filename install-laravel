#!/bin/bash

# # scriptLaravel

# This script will install any cloned laravel project.

# What it does :
#    - creates a database if needed, or use an existing one (created prior to the install, will drop its tables is chosen)
#    - prepares the .env file. Creates one if it doesn't exist
#    - installs composer
#    - installs NPM packages
#    - generates app key
#    - launches migrations and seeds
#    - launches npm run production to compile js and css
#    - launches server

# How to use it:
# - copy the script in your project folder
# - run it by typing in your project folder from your terminal : ./install-laravel

black=$(tput setaf 0)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
reset=$(tput sgr0)
bgRed=$(tput setab 1)
bgGreen=$(tput setab 2)
bgYellow=$(tput setab 3)

envContent="APP_NAME=Laravel\nAPP_ENV=local\nAPP_KEY=\nAPP_DEBUG=true\nAPP_LOG_LEVEL=debug\nAPP_URL=http://localhost\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=homestead\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=file\nSESSION_DRIVER=file\nQUEUE_DRIVER=sync\n\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_DRIVER=\nMAIL_HOST=\nMAIL_PORT=\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\n\nMAILGUN_DOMAIN=\nMAILGUN_SECRET=\n\nDEBUGBAR_ENABLED=false\nSENTRY_LARAVEL_DSN=\n\nMAIL_FROM_ADDRESS=\nMAIL_FROM_NAME=\n
"
displayMessage() {
	echo
	echo ----------------------------------------------
	echo $type$message${reset}
	echo ----------------------------------------------
}

displayError() {
   echo "${bgRed}${black} ERROR ${reset}"
}

displayWarning() {
   echo "${bgYellow}${black} WARNING ${reset}"
}

displayDone() {
   echo "${bgGreen}${black} DONE ${reset}"
   sleep 1
}

launchingServer() {
   message="Launching server... Enjoy!"
	type=$green
	displayMessage $message $type 

   php artisan serve
}

npmProduction() {
   displayDone
   message="Compiling JS and CSS files..."
	type=$green
	displayMessage $message $type 
   sleep 2

   npm run production
   launchingServer
}

migrateAndSeed() {
   displayDone
   message="Migrating and seeding..."
	type=$green
	displayMessage $message $type 
   sleep 2

   php artisan migrate:fresh --seed
   npmProduction
}

generatingKey() {
   displayDone
   message="Generating APP Key..."
	type=$green
	displayMessage $message $type 
   sleep 2

   php artisan key:generate
   migrateAndSeed
}

installNpmPackages() {
   displayDone
   message="Installing NPM Packages..."
	type=$green
	displayMessage $message $type 
   sleep 2

   npm install
   generatingKey
}

installComposer() {
	message="Installing Composer..."
	type=$green
	displayMessage $message $type 
   sleep 2

   composer install
   installNpmPackages
}

prepareEnv() {
	 DB_DATABASE_N="DB_DATABASE=$dbname" 
	 DB_USERNAME_N="DB_USERNAME=$dbuser" 
	 DB_PASSWORD_N="DB_PASSWORD=$dbpassword" 

    if [[ "$OSTYPE" == "linux-gnu" ]]; then
      sed -i "s/DB_DATABASE=homestead/${DB_DATABASE_N}/g" .env 
      sed -i "s/DB_USERNAME=homestead/${DB_USERNAME_N}/g" .env 
      sed -i "s/DB_PASSWORD=secret/${DB_PASSWORD_N}/g" .env
    elif [[ "$OSTYPE" == "darwin"* ]]; then
      sed -i '.bak' "s/DB_DATABASE=homestead/${DB_DATABASE_N}/g" .env 
      sed -i '.bak' "s/DB_USERNAME=homestead/${DB_USERNAME_N}/g" .env 
      sed -i '.bak' "s/DB_PASSWORD=secret/${DB_PASSWORD_N}/g" .env
    else echo 'Please use a linux or mac machine to run this script'
   fi

    installComposer
}

duplicatingEnvExampleToEnv() {
   message="Setting up .env file"; type=$green; displayMessage $message $type
   sleep 1
   FILE=.env.example
   if test -f "$FILE"; 
   then
      cp .env.example .env
      displayDone 
	   prepareEnv $dbname $dbuser $dbpassword
   else 
      echo "| ${yellow} no .env.example file found in projet directory, creating one ${reset}";
      touch .env.example
      echo -e $envContent >> $FILE
      cp .env.example .env
      sleep 2
      displayDone
	   prepareEnv $dbname $dbuser $dbpassword
   fi
}

createDb() {	
	message="Creating database: $dbname"; type=$green; displayMessage "Creating database: $dbname" $green
	mysql --user=$dbuser --password=$dbpassword -e "create database $dbname;"
   sleep 1
   displayDone

	duplicatingEnvExampleToEnv
}

checkIfDbExists() {
	RESULT=`mysql --user=$dbuser --password=$dbpassword -e "show databases" | grep -w $dbname`
		if [ "$RESULT" = "$dbname" ]
			then 
            echo
				echo "${bgYellow}${black} WARNING ${reset} ${red} /!\ Database $dbname already exists, what do you want to do? /!\ ${reset}";

            PS3="Select an option (1 or 2): "
            options=("Use this database ($dbname) anyway, all tables will be droped" "Create/Use another database")
            select opt in "${options[@]}"
            do case $opt in
               "Use this database ($dbname) anyway, all tables will be droped")
               duplicatingEnvExampleToEnv
               break
               ;;
               "Create/Use another database")
               settingUpDataBase
               break
               ;;
               *) echo invalid option
               ;;
            esac
         done
			else
				createDb $dbuser $dbpassword $dbname
		fi
}

checkCredentials() {
	RESULT=$(mysql --user=$dbuser --password=$dbpassword -e "SHOW DATABASES;")
	#vérifie l'exit status de la comamnde précédente
	if [ $? -ne "0" ] 
		then 	
			echo "${red}wrong credentials${reset}";
			settingUpDataBase
	else
		result="ok";
		checkIfDbExists $dbuser $dbpassword $dbname
	fi
}

header() {
   echo ' 


    ____  __         ____           __        ____         
   / __ \/ /        /  _____  _____/ /_____ _/ / ___  _____
  / /_/ / /  ______ / // __ \/ ___/ __/ __ `/ / / _ \/ ___/
 / ____/ /__/______/ // / / (__  / /_/ /_/ / / /  __/ /    
/_/   /_____/    /___/_/ /_/____/\__/\__,_/_/_/\___/_/    
---------------The Project Laravel Installer----------------


   '
   
	message="${yellow}Checking if the directory container a laravel project"
	type=$green
	displayMessage $message $type 
   sleep 1;
   displayDone
}

getDbInfo() {
   if [ -z "$FIRSTRUN" ]
   then
   clear
   header
FIRSTRUN=1
   fi
	message="Setting up database ${reset}| ${yellow}A new database will be created if it doesn't exist"
	type=$green
	displayMessage $message $type 

	read -p ${yellow}'---> Database name: '${reset} dbname
	read -p ${yellow}'---> Database user: '${reset} dbuser
	read -s -p ${yellow}'---> Database password: '${reset} dbpassword
}

isThisNotAProjectLaravel() {
   LARAVEL_VERSION=$(cat composer.json \
   | grep laravel/framework \
   | head -2 \
   | awk -F: '{ print $2 }' \
   | sed 's/[",]//g' \
   | tr -d '[[:space:]]')
   if [ -z "$LARAVEL_VERSION" ]; then
      return
   fi 
      false
}

settingUpDataBase() {
   if isThisNotAProjectLaravel;
   then 
      clear
      header
      message="The directory doesn't seem to contain a Laravel project"; type=$red; displayMessage $message $type
   else
      getDbInfo
      checkCredentials
   fi
}

start() {
   settingUpDataBase
}

start

