#!/bin/bash

green=$(tput setaf 2)
red=$(tput setaf 1)
yellow=$(tput setaf 3)
reset=$(tput sgr0)


displayMessage() {
	echo
	echo ----------------------------------------------
	echo $type$message${reset}
	echo ----------------------------------------------
}

launchingServer() {
   message="Launching server... Enjoy!"
	type=$green
	displayMessage $message $type 

   php artisan serve
}

npmProduction() {
   message="Compiling JS and CSS files..."
	type=$green
	displayMessage $message $type 
   sleep 2

   npm run production
   launchingServer
}

migrateAndSeed() {
   message="Migrating and seeding..."
	type=$green
	displayMessage $message $type 
   sleep 2

   php artisan migrate --seed
   npmProduction
}

generatingKey() {
   message="Generating APP Key..."
	type=$green
	displayMessage $message $type 
   sleep 2

   php artisan key:generate
   migrateAndSeed
}

installNpmPackages() {
   message="Installing NPM Packages..."
	type=$green
	displayMessage $message $type 
   sleep 2

   npm install
   generatingKey
}

installComposer() {
	message="Installing Composer..."
	type=$green
	displayMessage $message $type 
   sleep 2

   composer install
   installNpmPackages
}

prepareEnv() {
	 DB_DATABASE_N="DB_DATABASE=$dbname" 
	 DB_USERNAME_N="DB_USERNAME=$dbuser" 
	 DB_PASSWORD_N="DB_PASSWORD=$dbpassword" 

    if [[ "$OSTYPE" == "linux-gnu" ]]; then
      sed -i "s/DB_DATABASE=homestead/${DB_DATABASE_N}/g" .env 
      sed -i "s/DB_USERNAME=homestead/${DB_USERNAME_N}/g" .env 
      sed -i "s/DB_PASSWORD=secret/${DB_PASSWORD_N}/g" .env
    elif [[ "$OSTYPE" == "darwin"* ]]; then
      sed -i '.bak' "s/DB_DATABASE=homestead/${DB_DATABASE_N}/g" .env 
      sed -i '.bak' "s/DB_USERNAME=homestead/${DB_USERNAME_N}/g" .env 
      sed -i '.bak' "s/DB_PASSWORD=secret/${DB_PASSWORD_N}/g" .env
   else echo 'Please use a linux or mac machine to run this script'
   fi

    installComposer
}

duplicatingEnvExampleToEnv() {
	message="Setting up .env file"; type=$green; displayMessage $message $type
	cp .env.example .env
   sleep 2

	prepareEnv
}

createDb() {	
	message="Creating database: $dbname"; type=$green; displayMessage "Creating database: $dbname" $green
	mysql --user=$dbuser --password=$dbpassword -e "create database $dbname;"
   sleep 2

	duplicatingEnvExampleToEnv
}

checkIfDbExists() {
	RESULT=`mysql --user=$dbuser --password=$dbpassword -e "show databases" | grep -w $dbname`
		if [ "$RESULT" = "$dbname" ]
			then 
            echo
				echo "${red} /!\ Database $dbname already exists, what do you want to do? /!\ ${reset}";

            PS3="Select an option: "
            options=("Use this database ($dbname) anyway" "Create/Use another database")
            select opt in "${options[@]}"
            do case $opt in
               "Use this database ($dbname) anyway")
               duplicatingEnvExampleToEnv
               break
               ;;
               "Create/Use another database")
               settingUpDataBase
               break
               ;;
               *) echo invalid option
               ;;
            esac
         done
			else
				createDb $dbuser $dbpassword $dbname
		fi
}

checkCredentials() {
	RESULT=$(mysql --user=$dbuser --password=$dbpassword -e "SHOW DATABASES;")
	#vérifie l'exit status de la comamnde précédente
	if [ $? -ne "0" ] 
		then 	
			echo "${red}wrong credentials${reset}";
			settingUpDataBase
	else
		result="ok";
		checkIfDbExists $dbuser $dbpassword $dbname
	fi
}

getDbInfo() {
   if [ -z "$FIRSTRUN" ]
   then
   clear
echo ' 


    ____  __         ____           __        ____         
   / __ \/ /        /  _____  _____/ /_____ _/ / ___  _____
  / /_/ / /  ______ / // __ \/ ___/ __/ __ `/ / / _ \/ ___/
 / ____/ /__/______/ // / / (__  / /_/ /_/ / / /  __/ /    
/_/   /_____/    /___/_/ /_/____/\__/\__,_/_/_/\___/_/    
---------------The Project Laravel Installer----------------


';
FIRSTRUN=1
   fi

	message="Setting up database ${reset}| ${yellow}A new database will be created if it doesn't exist"
	type=$green
	displayMessage $message $type 

	read -p ${yellow}'---> Database name: '${reset} dbname
	read -p ${yellow}'---> Database user: '${reset} dbuser
	read -s -p ${yellow}'---> Database password: '${reset} dbpassword
}

settingUpDataBase() {
	getDbInfo
	checkCredentials
}

start() {
   settingUpDataBase
}

start

